openapi: 3.0.1
info:
  title: API de ado칞칚o de pets
  version: "1.0"
servers:
  - url: http://localhost:8080

paths:
  # -------------------
  # 游댐 Sessions
  # -------------------
  /api/sessions/register:
    post:
      summary: Registro de usu치rio
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterInput'
            example:
              first_name: "Jo칚o"
              last_name: "Silva"
              email: "joao.silva@email.com"
              password: "123456"
      responses:
        "200":
          description: Usu치rio registrado com sucesso
          content:
            application/json:
              example:
                status: "success"
                payload: "65f01234567890abcdef1234"
        "400":
          description: Erro de valida칞칚o ou usu치rio j치 existente

  /api/sessions/login:
    post:
      summary: Login de usu치rio (gera cookie e token JWT)
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
            example:
              email: "joao.silva@email.com"
              password: "123456"
      responses:
        "200":
          description: Login realizado com sucesso (cookie + token no body)
          headers:
            Set-Cookie:
              description: Cookie definido com o JWT
              schema:
                type: string
              example: "coderCookie=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; Path=/; HttpOnly"
          content:
            application/json:
              example:
                status: "success"
                message: "Logged in"
                token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

        "400":
          description: Erro de valida칞칚o ou senha incorreta
        "404":
          description: Usu치rio n칚o encontrado

  /api/sessions/current:
    get:
      summary: Retorna usu치rio autenticado
      tags:
        - Sessions
      responses:
        "200":
          description: Dados do usu치rio autenticado
          content:
            application/json:
              example:
                status: "success"
                payload:
                  id: "65f01234567890abcdef1234"
                  first_name: "Jo칚o"
                  last_name: "Silva"
                  email: "joao.silva@email.com"
                  role: "user"
        "401":
          description: N칚o autenticado

  /api/sessions/unprotectedLogin:
    post:
      summary: Login sem prote칞칚o (retorna payload completo no token)
      tags:
        - Sessions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInput'
            example:
              email: "joao.silva@email.com"
              password: "123456"
      responses:
        "200":
          description: Login realizado (sem DTO)
          content:
            application/json:
              example:
                status: "success"
                message: "Unprotected Logged in"

  /api/sessions/unprotectedCurrent:
    get:
      summary: Retorna usu치rio autenticado (sem DTO)
      tags:
        - Sessions
      responses:
        "200":
          description: Dados completos do usu치rio (sem DTO)
          content:
            application/json:
              example:
                status: "success"
                payload:
                  _id: "5f9b9b9b9b9b9b9b9b9b9b9b"
                  first_name: "Jo칚o"
                  last_name: "Silva"
                  email: "joao.silva@email.com"
                  password: "$2b$10$saltsamplehashedpassword"
                  role: "user"
                  pets:
                    - _id: "65f01234567890abcdef1234"

  # -------------------
  # 游녻 Users
  # -------------------
  /api/users:
    get:
      summary: Obter todos os usu치rios
      tags:
        - Users
      responses:
        "200":
          description: Lista de usu치rios obtida com sucesso
          content:
            application/json:
              example:
                - _id: "5f9b9b9b9b9b9b9b9b9b9b9b"
                  first_name: "Jo칚o"
                  last_name: "Silva"
                  email: "joao.silva@email.com"
                  role: "user"
                  pets:
                    - _id: "65f01234567890abcdef1234"
                - _id: "5f8a8a8a8a8a8a8a8a8a8a8a"
                  first_name: "Maria"
                  last_name: "Oliveira"
                  email: "maria.oliveira@email.com"
                  role: "user"
                  pets: []

        "500":
          description: Erro interno do servidor

  /api/users/{uid}:
    get:
      summary: Obter usu치rio por ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID do usu치rio
          schema:
            type: string
      responses:
        "200":
          description: Usu치rio encontrado
          content:
            application/json:
              example:
                _id: "5f9b9b9b9b9b9b9b9b9b9b9b"
                first_name: "Jo칚o"
                last_name: "Silva"
                email: "joao.silva@email.com"
                role: "user"
                pets:
                  - _id: "65f01234567890abcdef1234"
        "404":
          description: Usu치rio n칚o encontrado
    put:
      summary: Atualizar usu치rio por ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID do usu치rio
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
            example:
              first_name: "Jo칚o Atualizado"
              last_name: "Silva"
              email: "joao.silva@novoemail.com"
              password: "novasenha123"
      responses:
        "200":
          description: Usu치rio atualizado com sucesso
          content:
            application/json:
              example:
                _id: "5f9b9b9b9b9b9b9b9b9b9b9b"
                first_name: "Jo칚o Atualizado"
                last_name: "Silva"
                email: "joao.silva@novoemail.com"
                role: "user"
                pets: []
        "400":
          description: Erro de valida칞칚o
        "404":
          description: Usu치rio n칚o encontrado
    delete:
      summary: Deletar usu치rio por ID
      tags:
        - Users
      parameters:
        - name: uid
          in: path
          required: true
          description: ID do usu치rio
          schema:
            type: string
      responses:
        "204":
          description: Usu치rio deletado com sucesso
        "404":
          description: Usu치rio n칚o encontrado

components:
  schemas:
    # ------------ Sessions ------------
    RegisterInput:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
          example: Jo칚o
        last_name:
          type: string
          example: Silva
        email:
          type: string
          example: joao.silva@email.com
        password:
          type: string
          example: 123456
      example:
        first_name: "Jo칚o"
        last_name: "Silva"
        email: "joao.silva@email.com"
        password: "123456"

    LoginInput:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: joao.silva@email.com
        password:
          type: string
          example: 123456
      example:
        email: "joao.silva@email.com"
        password: "123456"

    UserDTO:
      type: object
      description: Dados b치sicos retornados no token
      properties:
        id:
          type: string
          example: 65f01234567890abcdef1234
        first_name:
          type: string
          example: Jo칚o
        last_name:
          type: string
          example: Silva
        email:
          type: string
          example: joao.silva@email.com
        role:
          type: string
          example: user
      example:
        id: "65f01234567890abcdef1234"
        first_name: "Jo칚o"
        last_name: "Silva"
        email: "joao.silva@email.com"
        role: "user"

    # ------------ Users ------------
    User:
      type: object
      description: Usu치rio completo (do MongoDB)
      properties:
        _id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          default: user
        pets:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
      example:
        _id: "5f9b9b9b9b9b9b9b9b9b9b9b"
        first_name: "Jo칚o"
        last_name: "Silva"
        email: "joao.silva@email.com"
        password: "$2b$10$saltsamplehashedpassword"
        role: "user"
        pets:
          - _id: "65f01234567890abcdef1234"

    UserInput:
      type: object
      description: Esquema de entrada para atualizar usu치rio
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: string
          default: user
      example:
        first_name: "Jo칚o Atualizado"
        last_name: "Silva"
        email: "joao.silva@novoemail.com"
        password: "novasenha123"
